name: Build AVR Toolchain

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            host: x86_64-linux-gnu
          - os: ubuntu-latest
            host: x86_64-mingw32
          - os: macos-latest
            host: x86_64-apple-darwin
          - os: macos-13
            host: arm64-apple-darwin
          - os: ubuntu-24.04-arm
            host: aarch64-linux-gnu
          - os: ubuntu-24.04-arm
            host: arm-linux-gnueabihf

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4

    - name: Install Linux Dependencies
      if: runner.os == 'Linux' && matrix.host != 'arm-linux-gnueabihf'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential texinfo automake autoconf python3 wget zip unzip bzip2
        if [ "${{ matrix.host }}" = "x86_64-mingw32" ]; then
          sudo apt-get install -y mingw-w64
        fi

    - name: Install macOS Dependencies
      if: runner.os == 'macOS'
      run: |
        brew install autoconf automake

    - name: Build Linux Toolchain for Windows Build
      if: matrix.host == 'x86_64-mingw32'
      run: |
        ./build-avr-toolchain.sh
        mv build build-linux
        export PATH=$PWD/build-linux/avr-toolchain/bin:$PATH
        export HOST_ARG="--host=x86_64-w64-mingw32"
        ./build-avr-toolchain.sh

    - name: Build Toolchain
      if: matrix.host != 'arm-linux-gnueabihf' && matrix.host != 'x86_64-mingw32'
      run: ./build-avr-toolchain.sh

    - name: Build Toolchain (armv7)
      if: matrix.host == 'arm-linux-gnueabihf'
      run: |
        docker run --platform linux/arm/v7 --rm -v ${{ github.workspace }}:/workspace arm32v7/ubuntu:22.04 \
          bash -c "\
            apt-get update && \
            apt-get install -y build-essential texinfo automake autoconf python3 wget zip unzip bzip2 && \
            cd /workspace && \
            ./build-avr-toolchain.sh"

    - name: Prepare Artifact Archive
      run: |
        source versions.sh
        cd build
        tar -cjf ../avr-toolchain-${GCC_VERSION}_${RELEASE_VERSION}-${{ matrix.host }}.tar.bz2 avr-toolchain

    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: avr-toolchain-${{ env.GCC_VERSION }}_${{ env.RELEASE_VERSION }}-${{ matrix.host }}.tar.bz2
        path: avr-toolchain-${{ env.GCC_VERSION }}_${{ env.RELEASE_VERSION }}-${{ matrix.host }}.tar.bz2
        compression-level: 0